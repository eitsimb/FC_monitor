#ifndef __LIB_FC_PCI_H
#define __LIB_FC_PCI_H
#include <Windows.h>
#include <stdio.h>
#include <dos.h>

#define INI_MAME "init.ini"
#define DEVICE_NAME "\\\\.\\fc_pcie0"
#define EVENT_NAME  "Global\\FC_IRQEvent0"


const int FC_ERR_NOERR = 0;
//Интерфейс не инициализирован
const int FC_ERR_NOT_INIT = -1;
//Интерфейс уже инициирован
const int FC_ERR_ALRD_INIT = -2;
//Драйвер не открыт
const int FC_ERR_DRV_NOT_OPENED = -3;
//Неверный входной параметр
const int FC_ERR_INV_PAR = -4;
//Ошибка работы драйвера
const int FC_ERR_DRV = -5;
//Не удалось запустить Event
const int FC_ERR_EVENT = -10;


struct btv{
    int id;
    char* name;
    char* pchrFile;
 };

struct rData{
    bool bStatus;
    int rD;
};

struct rbData{
        bool bStatus;
        int* rbD;
};



void __fastcall ShowErr(char* operation);

//***************************************************************************
//Получение кода последней ошибки при использовании функций библиотеки
//Вход:
//Выход:
//		Код ошибки.
//***************************************************************************
int __fastcall FC_GetLastError(void);

//***************************************************************************
//Получение описания кода ошибки при использовании функций библиотеки
//Вход:
//	iErrCode	-	Код ошибки.
//Выход:
//		Описание ошибки.
//***************************************************************************
char* __fastcall FC_GetDescError(int iErrCode);

//***************************************************************************
//Инициализация библиотеки
//Вход:
//Выход:
//	true		-	Инициализация завершилась успешно.
//	false		-	Функция не выполнена по одной из следующих причин
//	        (описание причины можно получить вызовом FC_GetLastError)
//	        FC_ERR_ALRD_INIT	     -	API FC_PCIELIB уже инициализировано
//	        FC_ERR_DRV_NOT_OPENED    -  Драйвер не открыт
//	        FC_ERR_DRV		     -	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Init(void);

//***************************************************************************
//Закрывает доступ к исполнению управляющих функций библиотеки
//Вход:
//Выход:
//	true		-	Функция выполнена.
//	false		-	Функция не выполнена  по одной из следующих причин
//  	        (описание причины можно получить вызовом ampiGetLastError)
//  	        FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//***************************************************************************
bool __fastcall FC_Close(void);


//***************************************************************************
//Сброс IP_CORE
//Вход:
//	d_reset	-	значение (в соответствии с описанием регистра REG_RESET_CORE)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Reset_Core(int d_reset);

//***************************************************************************
//Запись управляющего слова параметров канала FC
//Вход:
//	param	-	значение (в соответствии с описанием регистра REG_PARAMETERS)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteParameters(int param);

//***************************************************************************
//Чтение управляющего слова параметров канала FC
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_PARAMETERS).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//     	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadParameters(void);

//***************************************************************************
//Чтение статусного слова адаптера
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра STATUS).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//              (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadStatus(void);

//***************************************************************************
//Запись начального адреса памяти PC
//Вход:
//	adr	-	значение (в соответствии с описанием регистра REG_ADR_MASTER_PCI)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteAdr_master(int adr);

//***************************************************************************
//Чтение начального адреса памяти PC
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_ADR_MASTER_PCI).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadAdr_master(void);

//***************************************************************************
//Запись управляющего слова для доступа к внутренней памяти адаптера и регистрам
//Вход:
//	tx_rx	-	значение (в соответствии с описанием регистра REG_RAM_TX_RX)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool FC_SET_RAM_TX_RX(int tx_rx);

//***************************************************************************
//Чтение управляющего слова для доступа к внутренней памяти адаптера и регистрам
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_RAM_TX_RX).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_RAM_TX_RX(void);

//***************************************************************************
//Запись управляющего слова внутреннего таймера адаптера
//Вход:
//	tim	-	значение (в соответствии с описанием регистра REG_TIMER)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_En_Dis_Timer(int tim);

//***************************************************************************
//Чтение состояния внутреннего таймера адаптера
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_TIMER).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_Timer(void);

//***************************************************************************
//Сброс внутреннего счётчика пакетов передатчика FC в нулевое состояние
//Вход:
//	tim	-	значение (в соответствии с описанием регистра REG_COUNT_FRAME_TX))
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Reset_Count_Frame_TX();

//***************************************************************************
//Чтение состояния внутреннего счётчика пакетов передатчика FC
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_COUNT_FRAME_TX).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_Count_Frame_TX(void);

//***************************************************************************
//Сброс внутреннего счётчика пакетов приёмника FC в нулевое состояние
//Вход:
//	tim	-	значение (в соответствии с описанием регистра REG_COUNT_FRAME_RX))
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Reset_Count_Frame_RX();

//***************************************************************************
//Чтение состояния внутреннего счётчика пакетов приёмника FC
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_COUNT_FRAME_RX).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_Count_Frame_RX(void);

//***************************************************************************
//Старт передатчика FC с заданными параметрами
//Вход:
//	param	-	значение (в соответствии с описанием регистра REG_START_FC_TX))
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Start_Fc_Tx(int param);

//***************************************************************************
//Запись значения паузы между контейнерами передатчика
//Вход:
//	idle	-	значение (в соответствии с описанием регистра REG_IDLE_SEQ_TX)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Write_Idle_Seq_Tx(int idle);

//***************************************************************************
//Чтение значения паузы между контейнерами передатчика
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_IDLE_SEQ_TX).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_Idle_Seq_Tx(void);

//***************************************************************************
//Запись адреса интерфейса управления ядра FC
//Вход:
//	adr	-	значение (в соответствии с описанием регистра REG_ADR_FC_MANAGE)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteAdr_Fc_Manage(int adr);

//***************************************************************************
//Запись слова данных интерфейса управления ядра FC
//Вход:
//	adr	-	значение (в соответствии с описанием регистра REG_DATA_FC_MANAGE)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteData_Fc_Manage(int data);

//***************************************************************************
//Чтение слова данных интерфейса управления ядра FC
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_DATA_FC_MANAGE).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadData_Fc_Manage(void);

//***************************************************************************
//Чтение регистра состояния приёмника FC CORE
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_RXSTATUS).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadSTATUS_RX(void);

//***************************************************************************
//Чтение регистра статистики FC CORE
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_STATISTICS).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadSTATISTICS(void);

//***************************************************************************
//Чтение регистра состояния конфигурации FC CORE
//Вход:
//
//Выход:
//	true,data   	-	буфер из 8 слов считан(в соответствии с описанием регистров REG_CONFIG_STATUS).
//                              слова в буфере располагаются в порядке возрастания
//                               0-  REG_CONFIG_STATUS[31:0]
//                               1-  REG_CONFIG_STATUS[63:32]
//                               2-  REG_CONFIG_STATUS[95:64]
//                               3-  REG_CONFIG_STATUS[127:96]
//                               4-  REG_CONFIG_STATUS[159:128]
//                               5-  REG_CONFIG_STATUS[191:160]
//                               6-  REG_CONFIG_STATUS[223:192]
//                               7-  REG_CONFIG_STATUS[238:224]
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rbData __fastcall FC_ReadCONFIG_STATUS(void);

//***************************************************************************
//Сброс передатчика
//Вход:
//	data	-	значение (в соответствии с описанием регистра REG_RESET_TX)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Reset_TX(int data);

//***************************************************************************
//Сброс приёмника
//Вход:
//	data	-	значение (в соответствии с описанием регистра REG_RESET_RX)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Reset_RX(int data);

//***************************************************************************
//Запись слота передатчика
//Вход:
//	data	-	значение (в соответствии с описанием регистра REG_TX_SLOT)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Write_TX_Slot(int data);

//***************************************************************************
//Запись слота приёмника
//Вход:
//	data	-	значение (в соответствии с описанием регистра REG_RX_SLOT)
//
//Выход:
//	true		-	значение записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//    	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_Write_RX_Slot(int data);

//***************************************************************************
//Чтение регистра слота передатчика
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_TX_SLOT).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_TX_Slot(void);

//***************************************************************************
//Чтение регистра слота приёмника
//Вход:
//
//Выход:
//	true,data   	-	Слово данных считано(в соответствии с описанием регистра REG_RX_SLOT).
//	false,0     	-	Функция не выполнена  по одной из следующих причин
//   	        (описание причины можно получить вызовом FC_GetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_Read_RX_Slot(void);

//***************************************************************************
//Запись слова данных во внутреннюю память адаптера
//Вход:
//     	*adr_data	-     указатель на буфер из двух слов,
//                              первое из которых адрес, второе - данные
//                           (адрес может быть в диапазоне от 0 до 1023)
//                              записываемый буфер задаётся через функцию
//                              FC_SET_RAM_TX_RX
//Выход:
//	true		-	Слово данных записано.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteMem(int *adr_data);

//***************************************************************************
//Чтение слова данных из внутренней памяти адаптера
//Вход:
//     	adr	-     адрес (адрес может быть в диапазоне от 0 до 1023)
//                              считываемый буфер задаётся через функцию
//                              FC_SET_RAM_TX_RX
//Выход:
//	true,data	-	Слово данных считано.
//	false,0		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadMem(int adr);

//***************************************************************************
//Запись блока данных во внутреннюю память адаптера
//Вход:
//     	*adr_data	-     указатель на буфер,
//                              первое из которых число слов,
//                              второе - начальный адрес,
//                              далее - данные
//                           (адрес может быть в диапазоне от 0 до 1023)
//                              записываемый буфер задаётся через функцию
//                              FC_SET_RAM_TX_RX
//Выход:
//	true		-	блок данных записан.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteBlockMem(UINT32 *adr_data);

//***************************************************************************
//Чтение блока данных из внутренней памяти адаптера
//Вход:
//     	*num_adr	-     указатель на буфер,
//                              первое из которых число слов,
//                              второе - начальный адрес,
//                           (адрес может быть в диапазоне от 0 до 1023)
//                              считываемый буфер задаётся через функцию
//                              FC_SET_RAM_TX_RX
//Выход:
//	true,data	-	Слово данных считано.
//	false,0		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rbData __fastcall FC_ReadBlockMem(int *num_adr);

//***************************************************************************
//Чтение состояния флагов прерывания на момент последнего прерывания
//Вход:
//Выход:
//	true,data	-	Слово данных считано.
//	false,0		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadFlag_irq(void);

//***************************************************************************
//Сброс флагов прерывания
//Вход:
//Выход:
//	true            -	Сброс произведён.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_ResetFlag_irq(void);


//***************************************************************************
//Получение указателя на начало буфера в памяти PC
//Вход:
//Выход:
//	true            -	Указатель получен.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool  __fastcall  FC_Get_Adr(void* b);

//***************************************************************************
//Установка связи между событием ядра Windows и функцией обработки этого события
//Вход:
//Выход:
//	true            -	Связь установлена.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
//bool __fastcall  SetCallback(TCBFunc  CBFunc);

//***************************************************************************
//Старт запуска Event
//Вход:
//Выход:
//	true            -	Event запущен.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_EVENT		-	Не удалось запустить Event
//***************************************************************************
bool __fastcall  Start();

//***************************************************************************
//СТОП Event
//Вход:
//Выход:
//	true            -	Event остановлен.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_EVENT		-	Не удалось остановить Event
//***************************************************************************
bool __fastcall  Stop();

//***************************************************************************
//Чтение кадра изображения из памяти PC в видеопамять
//Вход: Указатель на начальный адрес в видеопамяти
//Выход:
//	true            -	Кадр прочитан.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//              FC_ERR_NOT_INIT     -	Интерфейс не инициализирован
//      	FC_ERR_DRV          -	Ошибка работы драйвера
//***************************************************************************
//bool __fastcall FC_Read(Graphics::TBitmap* b,int nbuf);

//***************************************************************************
//Чтение конфигурационного пространства устройства
//Вход:
//Выход:
//	true            -	конфигурационное пространство устройства прочитано.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//              FC_ERR_NOT_INIT     -	Интерфейс не инициализирован
//      	FC_ERR_DRV          -	Ошибка работы драйвера
//***************************************************************************
rbData __fastcall FC_ReadConfig_Pci(void);

//***************************************************************************
//Запись тестового бита
//Вход:
//     	st	        -       0 или 1
//Выход:
//	true		-	бит записан.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteStatus(int st);

//***************************************************************************
//Запись состояния сигнала Applybackpressure ядра Fibre Channel
//(номер канала в соответствии с описанием регистра REG_RAM_TX_RX)
//Вход:
//     	apl	        -       0 или 1
//Выход:
//	true		-	бит записан.
//	false		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
bool __fastcall FC_WriteApplybackpressure(int apl);

//***************************************************************************
//Чтение состояния сигнала Applybackpressure ядра Fibre Channel
//(номер канала в соответствии с описанием регистра REG_RAM_TX_RX)
//Вход:
//Выход:
//	true,data	-	состояния сигнала Applybackpressure ядра Fibre Channel считано.
//	false,0		-	Функция не выполнена  по одной из следующих причин
//	     	(описание причины можно получить вызовом FC_IGetLastError)
//		FC_ERR_NOT_INIT		-	Интерфейс не инициализирован
//		FC_ERR_DRV			-	Ошибка работы драйвера
//***************************************************************************
rData __fastcall FC_ReadApplybackpressure(void);

bool __fastcall FC_IsReady(bool *bl);

bool Connect_ch(unsigned int ch);

#endif
